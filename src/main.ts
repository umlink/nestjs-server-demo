import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';
import fastifyCsrf from '@fastify/csrf-protection';
import helmet from '@fastify/helmet';
import { Logger, ValidationPipe } from '@nestjs/common';
import { WINSTON_MODULE_NEST_PROVIDER } from 'nest-winston';
import { addResponseWrapper } from '@/utils/modules-utils';
import { ConfigService } from '@/modules/config/config.service';

/**
 * ‚ö†Ô∏èÂ∫ïÂ±Ç‰ΩøÁî® fastify
 */
async function mainApp() {
  const app = await NestFactory.create<NestFastifyApplication>(
    AppModule,
    new FastifyAdapter(), // ÂºÄÂêØÈªòËÆ§Êó•Âøó
  );
  // ÂºÄÂêØ NestWinston Êó•Âøó
  app.useLogger(app.get(WINSTON_MODULE_NEST_PROVIDER));

  // Ëé∑ÂèñÈÖçÁΩÆ‰ø°ÊÅØ
  const configService = app.get(ConfigService);
  console.log(configService.getAll());

  // ‰øùÊä§Â∫îÁî®ÂÖçÂèó‰∏Ä‰∫õ‰ºóÊâÄÂë®Áü•ÁöÑ Web ÊºèÊ¥ûÁöÑÊîªÂáª
  await app.register(helmet, {
    contentSecurityPolicy: false,
  });

  // CSRF ‰øùÊä§
  await app.register(fastifyCsrf);

  // ÂêØÁî®Ë∑®Ê∫êËµÑÊ∫êÂÖ±‰∫´ÔºàCORSÔºâ‰øùÊä§Êú∫Âà∂
  app.enableCors();

  // ËÆæÁΩÆÊé•Âè£Áªü‰∏ÄÂâçÁºÄ
  app.setGlobalPrefix(configService.get('API_PREFIX'));

  /**
   * ÂèÇÊï∞Ê†°È™å
   * disableErrorMessages: true ÂèØÁ¶ÅÁî®ËØ¶ÁªÜ‰ø°ÊÅØ
   * whitelistÔºöËøáÊª§Èùû dto Â≠óÊÆµ
   * transformÔºöËá™Âä®Á±ªÂûãËΩ¨Êç¢
   */
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      transform: true,
    }),
  );
  /**
   * ÂºÄÂêØÊñπÂºèÂêéÊúüÈúÄÂÆöÂà∂Â§ÑÁêÜÔºå‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÁ∫ø‰∏äÈúÄÂÖ≥Èó≠
   * tips: api.json ÂÜÖÂÆπÈªòËÆ§ËÆøÈóÆË∑ØÁî±‰∏∫ [basePath] + '-json', Âç≥ `/swagger-api-json`
   * */
  if (configService.get('API_ENABLED_SWAGGER') === 'True') {
    const config = new DocumentBuilder()
      .setTitle('Swagger API')
      .setDescription('EasyÁÆÄÂéÜÂâçÂè∞Êé•Âè£')
      .setVersion('1.0')
      .addTag('ü§£Nestjs Service')
      .build();
    const document = addResponseWrapper(
      SwaggerModule.createDocument(app, config, {
        ignoreGlobalPrefix: false, // ÂøΩÁï•ËÆæÁΩÆ setGlobalPrefix
        operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,
      }),
    );
    SwaggerModule.setup('/swagger-api', app, document);
  }

  /*------------------------------------------------------------------------------*/
  await app.listen(configService.get('SERVER_PORT'), configService.get('SERVER_HOST'));
  /*------------------------------------------------------------------------------*/
  return configService;
}

mainApp().then((configService) => {
  Logger.log(`server started by ${configService.get('SERVER_HOST')}:${configService.get('SERVER_PORT')}`);
});
